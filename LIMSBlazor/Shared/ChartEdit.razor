@using LIMSBlazor.Data
@using Microsoft.AspNetCore.Mvc.Rendering;
@using System.Linq;
@using System.Collections;
@using System.Collections.Generic;
@inject IAttrService AttrService
@inject ISampleAttrService SampleAttrService
@inject IResultService ResultService
@inject IFinalResultService FinalResultService

<Button Clicked="@(async () => await HandleRedraw())">Перерисовать</Button>
@if ((AnalyticalTrue == 1) && (GrupItem.Count >= 2))
{<Button Clicked="@AddUpdateFinalResult">В финальные результаты</Button>}
<RadarChart @ref="radarChart" TItem="double" Clicked="@OnClicked" />

@code {
        /// <summary>
        /// Задаются параметры графиков
        /// </summary>


        IEnumerable<FinalResult> finalresults;

        [Parameter]
        public List<Result> GrupItem { get; set; }
        [Parameter]
        public string Title { get; set; }
        [Parameter]
        public int SampleId { get; set; }
        [Parameter]
        public int AnalyticalTrue { get; set; }

        RadarChart<double> radarChart;
        List<string> Labels = new List<string>();
        FinalResult finalresult = new FinalResult();
        Result result = new Result();
        List<FinalResult> FinalResults = new List<FinalResult>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
        else
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await radarChart.Clear();
        Labels.Clear();
        FinalResults.Clear();

        if (GrupItem.Count >= 2)
        {
            finalresults = await FinalResultService.FinalResultList(SampleId);
            foreach (var item in finalresults.GroupBy(e => e.AnalyticalServiceId))
            {
                FinalResults.Add(item.FirstOrDefault());
            }

            await radarChart.AddLabelsDatasetsAndUpdate(Labels, GetRadarChartDataset());
            var options = new RadarChartOptions
            {
                AspectRatio = 1,

            };
            await radarChart.SetOptions(options);
        }
    }


    RadarChartDataset<double>[] GetRadarChartDataset()
    {
        List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
        List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };
        return new RadarChartDataset<double>[]
        {
            new RadarChartDataset<double>
            {
                Label = Title,
                Data = GetData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                LineTension = 0,
            }
                    };
    }


    List<double> GetData()
    {
        var data = new List<double>();
        float itemValue = 0;
        string itemName = "";

        foreach (var item in GrupItem)
        {
            if (!Labels.Contains(item.ValueNo.ToString()))
                Labels.Add(item.ValueNo.ToString());
            data.Add(item.Value);
            if (itemName == "")
                itemName = item.ValueNo.ToString();
            else
                itemName = itemName + "," + item.ValueNo.ToString();
            itemValue += item.Value;
        }
        itemValue = itemValue / GrupItem.Count;
        Labels.Add(itemName);
        data.Add(itemValue);
        return data;
    }

    void OnClicked(ChartMouseEventArgs e)
    {
        int index = e.Index;
    }

    protected async Task AddUpdateFinalResult()
    {
        float itemValue = 0;
        string itemName = "";

        if (GrupItem.Count > 0)
        {
            foreach (var item in GrupItem)
            {
                finalresult.SampleId = item.SampleId;
                finalresult.AnalyticalServiceId = item.AnalyticalServiceId;
                if (itemName == "")
                    itemName = item.ValueNo.ToString();
                else
                    itemName = itemName + "," + item.ValueNo.ToString();
                itemValue += item.Value;
            }

            finalresult.ValueNo = itemName;
            finalresult.Value = itemValue / GrupItem.Count;
            //if ()
            {
                finalresult.CreateTime = DateTime.Now;
                finalresult.CreateUser = "Создавший пользователь";
                await FinalResultService.FinalResultInsert(finalresult);
            }
        }
        await HandleRedraw();
    }
}
