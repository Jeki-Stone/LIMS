@using LIMSBlazor.Data
@using Microsoft.AspNetCore.Mvc.Rendering;
@using System.Linq;
@using System.Collections;
@using System.Collections.Generic;
@inject IAttrService AttrService
@inject ISampleAttrService SampleAttrService
@inject IResultService ResultService

<Button Clicked="@(async () => await HandleRedraw())">Перерисовать</Button>
<BarChart @ref="barChart" TItem="double" />

@code {
    /// <summary>
    /// Задаются параметры графиков
    /// </summary>

    IEnumerable<FinalResult> finalresults;

    [Parameter]
    public List<Result> GrupItem { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public int SampleId { get; set; }
    [Parameter]
    public int AnalyticalTrue { get; set; }

    BarChart<double> barChart;
    List<string> Labels = new List<string>();
    Result result = new Result();
    List<FinalResult> FinalResults = new List<FinalResult>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
        else
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await barChart.Clear();
        Labels.Clear();

        if (GrupItem.Count >= 2)
        {
            await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());
            var options = new BarChartOptions
            {
                AspectRatio = 1,
            };
            await barChart.SetOptions(options);
        }
    }


    BarChartDataset<double>[] GetBarChartDataset()
    {
        List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
        List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };
        return new BarChartDataset<double>[]
        {
            new BarChartDataset<double>
            {
                Label = Title,
                Data = GetData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                //Fill = true,
                //LineTension = 0,
            }
        };
    }


    List<double> GetData()
    {
        var data = new List<double>();
        float itemValue = 0;
        string itemName = "Финальный результат";

        foreach (var item in GrupItem)
        {
            //if (!Labels.Contains(item.ValueNo.ToString()))
            //    Labels.Add(item.ValueNo.ToString());
            Labels.Add(item.Id.ToString());
            data.Add(item.Value);
            itemValue += item.Value;
        }
        itemValue = itemValue / GrupItem.Count;
        Labels.Add(itemName);
        data.Add(itemValue);
        return data;
    }
}
