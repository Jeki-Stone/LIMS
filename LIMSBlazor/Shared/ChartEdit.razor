@using LIMSBlazor.Data
@using Microsoft.AspNetCore.Mvc.Rendering;
@using System.Linq;
@using System.Collections;
@using System.Collections.Generic;
@inject IAttrService AttrService
@inject ISampleAttrService SampleAttrService
@inject IFinalResultService FinalResultService

<Button Clicked="@(async () => await HandleRedraw())">Перерисовать</Button>
@if (AnalyticalTrue == 1)
{<Button Clicked="@AddFinalResult">Добавить в финальные результаты</Button>}
<RadarChart @ref="radarChart" TItem="double" Clicked="@OnClicked" />

@code {
    FinalResult finalresult = new FinalResult();

    [Parameter]
    public List<Result> GrupItem { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public int SampleId { get; set; }
    [Parameter]
    public int AnalyticalTrue { get; set; }

    RadarChart<double> radarChart;
    List<string> Labels = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
        else
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await radarChart.Clear();
        Labels.Clear();


        await radarChart.AddLabelsDatasetsAndUpdate(Labels, GetRadarChartDataset());
        var options = new RadarChartOptions
        {
            AspectRatio = 1,

        };
        await radarChart.SetOptions(options);
    }


    RadarChartDataset<double>[] GetRadarChartDataset()
    {
        List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
        List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };
        return new RadarChartDataset<double>[] {
            new RadarChartDataset<double> {
                Label = Title,
                Data = GetData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                LineTension = 0,

            }
        };

    }


    List<double> GetData()
    {
        var data = new List<double>();
        float itemValue = 0;
        string itemName = "";

        foreach (var item in GrupItem)
        {
            if (item.SampleId == SampleId)
            {
                if (!Labels.Contains(item.ValueNo.ToString()))
                    Labels.Add(item.ValueNo.ToString());
                data.Add(item.Value);
                if (itemName == "")
                    itemName = item.ValueNo.ToString();
                else
                    itemName = itemName + "," + item.ValueNo.ToString();
                itemValue += item.Value;
            }
        }
        itemValue = itemValue / GrupItem.Count;
        Labels.Add(itemName);
        data.Add(itemValue);
        return data;
    }

    void OnClicked(ChartMouseEventArgs e)
    {
        var model = e.Model as RadarChartModel;
    }

    protected async Task AddFinalResult()
    {
        float itemValue = 0;
        string itemName = "";

        foreach (var item in GrupItem)
        {
            if (item.SampleId == SampleId)
            {
                finalresult.SampleId = item.SampleId;
                finalresult.AnalyticalServiceId = item.AnalyticalServiceId;
                if (itemName == "")
                    itemName = item.ValueNo.ToString();
                else
                    itemName = itemName + "," + item.ValueNo.ToString();
                itemValue += item.Value;
            }
        }

        finalresult.ValueNo = itemName;
        finalresult.Value = itemValue / GrupItem.Count;
        finalresult.CreateTime = DateTime.Now;
        finalresult.CreateUser = "Создавший пользователь";
        await FinalResultService.FinalResultInsert(finalresult);
        await HandleRedraw();
    }
}
