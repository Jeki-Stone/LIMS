@using LIMSBlazor.Data
@page "/config/analyticalservaddedit"
@page "/config/analyticalservaddedit/{id:int}"
@inject IAnalyticalServService AnalyticalServService
@inject ICategoryService CategoryService
@inject IUnitService UnitService
@inject NavigationManager NavigationManager

<DataEdit PageTitle="@pagetitle" Model="@analyticalserv" BtnSaveText="@buttontext" OnValidSubmit="@AnalyticalServSave" OnClickCancel="@Cancel">
    <table>
        <tr>
            <td>Наименование:</td>
            <td><input type="text" @bind="analyticalserv.Name" class="form-control" required></td>
        </tr>
        <tr>
            <td>Категория:</td>
            <td>
                <select @bind="analyticalserv.CategoryId" class="form-control" required>
                    @if (сategorys != null)
                    {
                        <option value="0">Выберите значение</option>
                        foreach (var item in сategorys)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Ед. измерения:</td>
            <td>
                <select @bind="analyticalserv.UnitId" class="form-control" required>
                    @if (units != null)
                    {
                        <option value="0">Выберите значение</option>
                        foreach (var item in units)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Описание:</td>
            <td><textarea class="form-control" type="text" id="exampleFormControlTextarea1" rows="5" cols="100" @bind="analyticalserv.Description"></textarea></td>
        </tr>
    </table>
</DataEdit>

    @code {
        // Create a new, empty object
        AnalyticalServ analyticalserv = new AnalyticalServ();

        IEnumerable<Category> сategorys;
        IEnumerable<Unit> units;

        [Parameter]
        public int id { get; set; }

        // Set default page title and button text
        public string pagetitle = "Добавить новый аналитический сервис";
        public string buttontext = "Добавить";

        //Executes on page open, set defaults on page.
        protected override async Task OnInitializedAsync()
        {
            сategorys = await CategoryService.CategoryList();
            units = await UnitService.UnitList();
            // ============ If the passed-in id is zero, assume new data.
            if (id != 0)
            {
                analyticalserv = await AnalyticalServService.AnalyticalServ_GetOne(id);
                // Change page title and button text since this is an edit.
                pagetitle = "Изменить данные аналитического сервиса";
                buttontext = "Изменить";
            }
        }

        protected async Task AnalyticalServSave()
        {
            if (analyticalserv.Id == 0)
            {
                // Insert if id is zero.
                await AnalyticalServService.AnalyticalServInsert(analyticalserv);
            }
            else
            {
                // Update is id > 0
                await AnalyticalServService.AnalyticalServUpdate(analyticalserv);
            }
            NavigationManager.NavigateTo("config/analyticalservlist");
        }
        void Cancel()
        {
            NavigationManager.NavigateTo("config/analyticalservlist");
        }
    }
