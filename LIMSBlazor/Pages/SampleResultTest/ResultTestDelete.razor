@using LIMSBlazor.Data
@page "/test/sample/resultdelete/{SampleId:int}/{id:int}"
@inject IResultService ResultService
@inject ISampleService SampleService
@inject IAnalyticalServService AnalyticalServService
@inject NavigationManager NavigationManager

    <DataEdit FormType="Delete" PageTitle="Удалить результат испытания" DeleteWarning="Вы уверены что хотите удалить этот результат испытания? Данные нельзя будет вернуть!" Model="@result" OnClickDelete="@Delete" OnClickCancel="@Cancel">
        <table>
            <tr>
                <td>Id испытания:</td>
                <td>@result.SampleId</td>
            </tr>
            <tr>
                <td>Аналитический сервис:</td>
                <td>@analyticalservs?.Where(x => x.Id == result.AnalyticalServiceId).FirstOrDefault()?.Name</td>
            </tr>
            <tr>
                <td>Номер образца:</td>
                <td>@result.ValueNo</td>
            </tr>
            <tr>
                <td>Результат:</td>
                <td>@result.Value</td>
            </tr>
            <tr>
                <td>В оценке:</td>
                <td>@if (result.IsFinal == true) {<img src="../images/iGreenCheck.png" width="25" height="25"/>}
                    else {<img src="../images/iRedX.png" width="25" height="25" />}</td>
            </tr>
            <tr>
                <td>Записка:</td>
                <td>@result.Note</td>
            </tr>
        </table>
    </DataEdit>


    @code { // Create a new, empty  object
        Result result = new Result();

        IEnumerable<Sample> samples;
        IEnumerable<AnalyticalServ> analyticalservs;

        [Parameter]
        public int SampleId { get; set; }
        [Parameter]
        public int id { get; set; }

        //Executes on page open..
        protected override async Task OnInitializedAsync()
        {
            samples = await SampleService.SampleList();
            analyticalservs = await AnalyticalServService.AnalyticalServList();
            result = await ResultService.Result_GetOne(id);
        }

        protected async Task Delete()
        {
            // Insert if id is zero.
            await ResultService.ResultDelete(id);
            NavigationManager.NavigateTo("/test/sample/resultlist/" + SampleId);
        }
        void Cancel()
        {
            NavigationManager.NavigateTo("/test/sample/resultlist/" + SampleId);
        } }
