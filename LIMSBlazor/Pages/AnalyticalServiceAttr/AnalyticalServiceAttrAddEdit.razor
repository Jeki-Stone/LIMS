@using LIMSBlazor.Data
@page "/config/analyticalserv/analyticalserviceattraddedit/{AnalyticalServiceId:int}"
@page "/config/analyticalserv/analyticalserviceattraddedit/{AnalyticalServiceId:int}/{AttrId:int}"
@inject IAnalyticalServiceAttrService AnalyticalServiceAttr
@inject IAnalyticalServService AnalyticalServService
@inject IAttrService AttrService
@inject NavigationManager NavigationManager

<DataEdit PageTitle="@pagetitle" Model="@analyticalserviceattr" BtnSaveText="@buttontext" OnValidSubmit="@AnalyticalServiceAttrSave" OnClickCancel="@Cancel">
    <table>
        <tr>
            <td>Id аналитического сервиса:</td>
            <td>@analyticalservs?.Where(x => x.Id == AnalyticalServiceId).FirstOrDefault()?.Name</td>
        </tr>
        <tr>
            <td>Атрибут:</td>
            <td>
                <select @bind="analyticalserviceattr.AttrId" class="form-control" required>
                    @if (attrs != null)
                    {
                        <option value="0">Выберите значение</option>
                        foreach (var item in attrs)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </td>
        </tr>
    </table>
</DataEdit>

@code {
    /// <summary>
    /// Создаём необходимые компоненты
    /// </summary>
    AnalyticalServiceAttr analyticalserviceattr = new AnalyticalServiceAttr();

    IEnumerable<AnalyticalServ> analyticalservs;
    IEnumerable<Attr> attrs;

    [Parameter]
    public int AnalyticalServiceId { get; set; }
    [Parameter]
    public int AttrId { get; set; }

    /// <summary>
    /// Задаём базовые значения
    /// </summary>
    public string pagetitle = "Добавить новый атрибут аналитического сервиса";
    public string buttontext = "Добавить";

    /// <summary>
    /// Исполняемая при запуске страницы задача
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        analyticalservs = await AnalyticalServService.AnalyticalServList();
        attrs = await AttrService.AttrList();
        /// Если Id ноль то будет добавлено новое значение
        if ((AnalyticalServiceId != 0) & (AttrId != 0))
        {
            analyticalserviceattr = await AnalyticalServiceAttr.AnalyticalServiceAttr_GetOne(AnalyticalServiceId, AttrId);
            pagetitle = "Изменить данные атрибута аналитического сервиса";
            buttontext = "Изменить";
        }
    }

    /// <summary>
    /// Задача сохраняющая при Id=0 или обновляющая данные если Id задан в БД
    /// </summary>
    protected async Task AnalyticalServiceAttrSave()
    {
        if ((analyticalserviceattr.AnalyticalServiceId != 0) & (analyticalserviceattr.AttrId != 0))
        {
            analyticalserviceattr.OldAttrId = AttrId;
            await AnalyticalServiceAttr.AnalyticalServiceAttrUpdate(analyticalserviceattr);
        }
        else
        {
            analyticalserviceattr.AnalyticalServiceId = AnalyticalServiceId;
            await AnalyticalServiceAttr.AnalyticalServiceAttrInsert(analyticalserviceattr);
        }

        NavigationManager.NavigateTo("config/analyticalserv/analyticalserviceattrlist/" + AnalyticalServiceId);
    }

    /// <summary>
    /// Отмена изменений и возвращение на прошлую страницу
    /// </summary>
    void Cancel()
    {
        NavigationManager.NavigateTo("config/analyticalserv/analyticalserviceattrlist/" + AnalyticalServiceId);
    }
}
