@using LIMSBlazor.Data
@page "/config/userlist/userroleaddedit/{UserId:int}"
@page "/config/userlist/userroleaddedit/{UserId:int}/{LabId:int}/{RoleId:int}"
@inject IUserRoleService UserRoleService
@inject ILabService LabService
@inject IUserService UserService
@inject IRoleService RoleService
@inject NavigationManager NavigationManager

<DataEdit PageTitle="@pagetitle" Model="@userrole" BtnSaveText="@buttontext" OnValidSubmit="@UserRoleSave" OnClickCancel="@Cancel">
    <table>
        <tr>
            <td>Пользователь:</td>
            <td>@users?.Where(x => x.Id == UserId).FirstOrDefault()?.Name</td>
        </tr>
        <tr>
            <td>Лаборатория:</td>
            <td>
                <select @bind="userrole.LabId" class="form-control" required>
                    @if (labs != null)
                    {
                        <option value="0">Выберите значение</option>
                        foreach (var item in labs)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Роль:</td>
            <td>
                <select @bind="userrole.RoleId" class="form-control" required>
                    @if (roles != null)
                    {
                        <option value="0">Выберите значение</option>
                        foreach (var item in roles)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </td>
        </tr>
    </table>
</DataEdit>

@code {
    /// <summary>
    /// Создаём необходимые компоненты
    /// </summary>
    UserRole userrole = new UserRole();

    IEnumerable<User> users;
    IEnumerable<Lab> labs;
    IEnumerable<Role> roles;

    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public int LabId { get; set; }
    [Parameter]
    public int RoleId { get; set; }

    /// <summary>
    /// Задаём базовые значения
    /// </summary>
    public string pagetitle = "Добавить новую роль пользователю";
    public string buttontext = "Добавить";

    /// <summary>
    /// Исполняемая при запуске страницы задача
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        users = await UserService.UserList();
        labs = await LabService.LabList();
        roles = await RoleService.RoleList();
        /// Если Id ноль то будет добавлено новое значение
        if ((UserId != 0) & (LabId != 0) & (RoleId != 0))
        {
            userrole = await UserRoleService.UserRole_GetOne(UserId, LabId, RoleId);
            pagetitle = "Изменить данные роли пользователя";
            buttontext = "Изменить";
        }
    }

    /// <summary>
    /// Задача сохраняющая при Id=0 или обновляющая данные если Id задан в БД
    /// </summary>
    protected async Task UserRoleSave()
    {
        if ((userrole.UserId != 0) & (userrole.LabId != 0) & (userrole.RoleId != 0))
        {
            userrole.OldLabId = LabId;
            userrole.OldRoleId = RoleId;
            await UserRoleService.UserRoleUpdate(userrole);
        }
        else
        {
            await UserRoleService.UserRoleInsert(userrole, UserId);
        }
        NavigationManager.NavigateTo("/config/userlist/userrolelist/" + UserId);
    }

    /// <summary>
    /// Отмена изменений и возвращение на прошлую страницу
    /// </summary>
    void Cancel()
    {
        NavigationManager.NavigateTo("/config/userlist/userrolelist/" + UserId);
    }
}
