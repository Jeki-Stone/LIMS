@using LIMSBlazor.Data
@page "/config/userlist/userrolelist/{UserId:int}"
@inject IUserRoleService UserRoleService
@inject ILabService LabService
@inject IUserService UserService
@inject IRoleService RoleService

<DataView PageTitle="Список ролей пользователя" UrlAdd=@UrlUserId UrlBack="/config/userlist" UrlAddText="Добавить новую роль для пользователя" UrlBackText="Вернуться к списку Пользователей">
    <Header>
        <tr>
            <th style="text-align:center">#</th>
            <th>Имя</th>
            <th>Лаборатория</th>
            <th>Роль</th>
        </tr>
    </Header>
    <Rows>
        @if (userroles == null)
        {
            <p style="text-align:center">
                <img src="../images/loader.gif" />
            </p>
        }
        else
        {
            @foreach (var userrole in userroles)
            {
                if (userrole.UserId == UserId)
                {
                    <tr>
                        <td style="text-align:center">
                            <a href="/config/userlist/userroleaddedit/@userrole.UserId/@userrole.LabId/@userrole.RoleId">
                                <img src="../images/iEdit.png" width="20" height="20" />
                            </a>
                            &nbsp
                            <a href="/config/userlist/userroledelete/@userrole.UserId/@userrole.LabId/@userrole.RoleId">
                                <img src="../images/iTrash.png" alt="Delete" title="Delete" width="20" height="20" />
                            </a>
                        </td>
                        <td>@users?.Where(x => x.Id == userrole.UserId).FirstOrDefault()?.Name</td>
                        <td>@labs?.Where(x => x.Id == userrole.LabId).FirstOrDefault()?.Name</td>
                        <td>@roles?.Where(x => x.Id == userrole.RoleId).FirstOrDefault()?.Name</td>
                    </tr>
                }
            }
        }
    </Rows>
</DataView>

@code {
    IEnumerable<UserRole> userroles;
    IEnumerable<User> users;
    IEnumerable<Lab> labs;
    IEnumerable<Role> roles;

    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public string UrlUserId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        userroles = await UserRoleService.UserRoleList();
        users = await UserService.UserList();
        labs = await LabService.LabList();
        roles = await RoleService.RoleList();
        UrlUserId = "/config/userlist/userroleaddedit/" + @UserId;
    }
}
