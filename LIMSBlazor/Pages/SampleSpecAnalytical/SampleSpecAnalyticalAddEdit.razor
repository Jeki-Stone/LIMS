@using LIMSBlazor.Data
@page "/samplespecanalyticaladdedit"
@page "/samplespecanalyticaladdedit/{SampleSpecId:int}/{AnalyticalServiceId:int}"
@inject ISampleSpecAnalyticalService SampleSpecAnalyticalService
@inject ISampleSpecService SampleSpecService
@inject IAnalyticalServService AnalyticalServService
@inject NavigationManager NavigationManager

<DataEdit PageTitle="@pagetitle" Model="@samplespecanalytical" BtnSaveText="@buttontext" OnValidSubmit="@SampleSpecAnalyticalSave" OnClickCancel="@Cancel">
    <table>
        <tr>
            <td>Спецификация:</td>
            <td>
                <select @bind="samplespecanalytical.SampleSpecId" class="form-control" required>
                    @if (samplespecs != null)
                    {
                        <option value="0">Выберите значение</option>
                        foreach (var item in samplespecs)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Аналитический сервис:</td>
            <td>
                <select @bind="samplespecanalytical.AnalyticalServiceId" class="form-control" required>
                    @if (analyticalservs != null)
                    {
                        <option value="0">Выберите значение</option>
                        foreach (var item in analyticalservs)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Минимальное значение:</td>
            <td><input type="text" @bind="samplespecanalytical.MinValue" class="form-control" required></td>
        </tr>
        <tr>
            <td>Максимальное значение:</td>
            <td><input type="text" @bind="samplespecanalytical.MaxValue" class="form-control" required></td>
        </tr>
    </table>
</DataEdit>

    @code {
        // Create a new, empty object
        SampleSpecAnalytical samplespecanalytical = new SampleSpecAnalytical();

        IEnumerable<SampleSpec> samplespecs;
        IEnumerable<AnalyticalServ> analyticalservs;

        [Parameter]
        public int SampleSpecId { get; set; }
        [Parameter]
        public int AnalyticalServiceId { get; set; }

        // Set default page title and button text
        public string pagetitle = "Добавить новый элемент спецификации";
        public string buttontext = "Добавить";

        //Executes on page open, set defaults on page.
        protected override async Task OnInitializedAsync()
        {
            samplespecs = await SampleSpecService.SampleSpecList();
            analyticalservs = await AnalyticalServService.AnalyticalServList();
            // ============ If the passed-in id is zero, assume new data.
            if ((SampleSpecId != 0) & (AnalyticalServiceId != 0))
            {
                samplespecanalytical = await SampleSpecAnalyticalService.SampleSpecAnalytical_GetOne(SampleSpecId, AnalyticalServiceId);
                // Change page title and button text since this is an edit.
                pagetitle = "Изменить данные элемента спецификации";
                buttontext = "Изменить";
            }
        }

        protected async Task SampleSpecAnalyticalSave()
        {
            if ((SampleSpecId == 0) & (AnalyticalServiceId == 0))
            {
                // Insert if id is zero.
                await SampleSpecAnalyticalService.SampleSpecAnalyticalInsert(samplespecanalytical);
            }
            else
            {
                // Update is id > 0
                samplespecanalytical.OldSampleSpecId = SampleSpecId;
                samplespecanalytical.OldAnalyticalServiceId = AnalyticalServiceId;
                await SampleSpecAnalyticalService.SampleSpecAnalyticalUpdate(samplespecanalytical);
            }
            NavigationManager.NavigateTo("/samplespecanalyticallist");
        }
        void Cancel()
        {
            NavigationManager.NavigateTo("/samplespecanalyticallist");
        }
    }
