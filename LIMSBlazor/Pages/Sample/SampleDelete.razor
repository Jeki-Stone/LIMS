@using LIMSBlazor.Data
@page "/samplelog/sampledelete/{id:int}"
@inject ISampleService SampleService
@inject ICliService CliService
@inject ISampleTypeService SampleTypeService
@inject ILocService LocService
@inject NavigationManager NavigationManager

<DataEdit FormType="Delete" PageTitle="Удалить пробу" DeleteWarning="Вы уверены что хотите удалить эту пробу? Данные нельзя будет вернуть!" Model="@sample" OnClickDelete="@Delete" OnClickCancel="@Cancel">
    <table>
        <tr>
            <td>Время получения:</td>
            <td>@sample.RecieveTime</td>
        </tr>
        <tr>
            <td>Время начала тестов:</td>
            <td>@sample.TestTime</td>
        </tr>
        <tr>
            <td>Клиент:</td>
            <td>@clis?.Where(x => x.Id == sample.ClientId).FirstOrDefault()?.Name</td>
        </tr>
        <tr>
            <td>Тип испытаний:</td>
            <td>@sampletypes?.Where(x => x.Id == sample.SampleTypeId).FirstOrDefault()?.Name</td>
        </tr>
        <tr>
            <td>Количество проб:</td>
            <td>@sample.NumSamples</td>
        </tr>
        <tr>
            <td>Статус:</td>
            <td>@sample.Status</td>
        </tr>
        <tr>
            <td>Готовность:</td>
            <td>
                @if (sample.IsFinal == true)
                {<img src="../images/iGreenCheck.png" width="25" height="25" />}
                else
                {<img src="../images/iRedX.png" width="25" height="25" />}
            </td>
        </tr>
        <tr>
            <td>Записка:</td>
            <td>@sample.Note</td>
        </tr>
        <tr>
            <td>Место взятия пробы:</td>
            <td>@locs?.Where(x => x.Id == sample.LocationId).FirstOrDefault()?.Name</td>
        </tr>
        <tr>
            <td>Причины изменений:</td>
            <td>@sample.LastEditComment</td>
        </tr>
    </table>
</DataEdit>

@code {
    /// <summary>
    /// Создаём необходимые компоненты
    /// </summary>
    Sample sample = new Sample();

    IEnumerable<Cli> clis;
    IEnumerable<SampleType> sampletypes;
    IEnumerable<Loc> locs;

    [Parameter]
    public int id { get; set; }

    /// <summary>
    /// Исполняемая при запуске страницы задача
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        clis = await CliService.CliList();
        sampletypes = await SampleTypeService.SampleTypeList();
        locs = await LocService.LocList();
        sample = await SampleService.Sample_GetOne(id);
    }

    /// <summary>
    /// Задача удаляющая запись из БД
    /// </summary>
    protected async Task Delete()
    {
        await SampleService.SampleDelete(id);
        NavigationManager.NavigateTo("samplelog/samplelist");
    }

    /// <summary>
    /// Отмена изменений и возвращение на прошлую страницу
    /// </summary>
    void Cancel()
    {
        NavigationManager.NavigateTo("samplelog/samplelist");
    }
}
