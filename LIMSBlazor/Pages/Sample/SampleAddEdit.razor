@using LIMSBlazor.Data
@page "/samplelog/sampleaddedit"
@page "/samplelog/sampleaddedit/{Id:int}"
@inject ISampleService SampleService
@inject ICliService CliService
@inject ISampleTypeService SampleTypeService
@inject ILocService LocService
@inject ISampleAnalyticalService SampleAnalyticalService
@inject NavigationManager NavigationManager

<DataEdit PageTitle="@pagetitle" Model="@sample" BtnSaveText="@buttontext" OnValidSubmit="@SampleSave" OnClickCancel="@Cancel">
    <table>
        <tr>
            <td>Время получения:</td>
            <td>
                <InputDate @bind-Value="sample.RecieveTime" />
            </td>
        </tr>
        <tr>
            <td>Время начала тестов:</td>
            <td><InputDate @bind-Value="sample.TestTime" /></td>
        </tr>
        <tr>
            <td>Клиент:</td>
            <td>
                <select @bind="sample.ClientId" required class="form-control">
                    @if (clis != null)
                    {
                        <option value="0">Выберите значение</option>
                        foreach (var item in clis)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Тип испытания:</td>
            <td>
                <select @bind="sample.SampleTypeId" required class="form-control" disabled=@Type>
                    @if (sampletypes != null)
                    {
                        <option value="0">Выберите значение</option>
                        foreach (var item in sampletypes)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Количество образцов:</td>
            <td><input type="number" @bind="sample.NumSamples" class="form-control" required></td>
        </tr>
        <tr>
            <td>Статус:</td>
            <td>
                <select @bind="sample.Status" required class="form-control">
                    <option value="0">Выберете значение</option>
                    @foreach (var item in GlobalConstant.SampleStatusModel)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Записка:</td>
            <td><textarea class="form-control" type="text" id="exampleFormControlTextarea1" rows="5" cols="100" @bind="sample.Note"></textarea></td>
        </tr>
        <tr>
            <td>Место взятия образца:</td>
            <td>
                <select @bind="sample.LocationId" required class="form-control">
                    @if (locs != null)
                    {
                        <option value="0">Выберите значение</option>
                        foreach (var item in locs)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Причины изменений:</td>
            <td><textarea class="form-control" type="text" id="exampleFormControlTextarea1" rows="5" cols="100" @bind="sample.LastEditComment"></textarea></td>
        </tr>
    </table>
</DataEdit>

    @code {
        // Create a new, empty object
        Sample sample = new Sample();
        SampleAnalytical sampleanalytical = new SampleAnalytical();

        IEnumerable<Cli> clis;
        IEnumerable<SampleType> sampletypes;
        IEnumerable<Loc> locs;

        [Parameter]
        public int? Id { get; set; }

        // Set default page title and button text
        public string pagetitle = "Добавить новыое испытание";
        public string buttontext = "Добавить";
        public bool Type = false;

        //Executes on page open, set defaults on page.
        protected override async Task OnInitializedAsync()
        {
            clis = await CliService.CliList();
            sampletypes = await SampleTypeService.SampleTypeList();
            locs = await LocService.LocList();
            // ============ If the passed-in id is zero, assume new data.
            if (Id != null)
            {
                sample = await SampleService.Sample_GetOne((int)Id);
                // Change page title and button text since this is an edit.
                pagetitle = "Изменить данные испытания";
                buttontext = "Изменить";
            }
            if (sample.Status > 1)
            {
                Type = true;
            }
        }

        protected async Task SampleSave()
        {
            if (Id == null)
            {
                sample.CreateTime = DateTime.Now;
                sample.CreateUser = "Создавший пользователь";
                // Insert if id is zero.
                // После вставки Insert возвращает новый обьект
                sample.IsFinal = false;
                sample = await SampleService.SampleInsert(sample);
            }
            else
            {
                sample.UpdateTime = DateTime.Now;
                sample.UpdateUser = "Обновивший пользователь пользователь";
                // Update is id > 0
                if (sample.Status == 5)
                {
                    sample.IsFinal = true;
                }
                else
                {
                    sample.IsFinal = false;
                }
                await SampleService.SampleUpdate(sample);
            }
            NavigationManager.NavigateTo("samplelog/samplelist");
        }
        void Cancel()
        {
            NavigationManager.NavigateTo("samplelog/samplelist");
        }
    }
