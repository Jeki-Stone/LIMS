@using LIMSBlazor.Data
@page "/confirmation/sample/resultaddedit/{SampleId:int}/{id:int}"
@inject IResultService ResultService
@inject ISampleService SampleService
@inject IAnalyticalServService AnalyticalServService
@inject NavigationManager NavigationManager

<DataEdit PageTitle="@pagetitle" Model="@result" BtnSaveText="@buttontext" OnValidSubmit="@ResultSave" OnClickCancel="@Cancel">
    <table>
        <tr>
            <td>Id испытания:</td>
            <td>@SampleId</td>
        </tr>
        <tr>
            <td>Аналитический сервис:</td>
            <td>@analyticalservs?.Where(x => x.Id == result.AnalyticalServiceId).FirstOrDefault()?.Name</td>
        </tr>
        <tr>
            <td>Номер образца:</td>
            <td>@result.ValueNo</td>
        </tr>
        <tr>
            <td>Результат:</td>
            <td>@result.Value</td>
        </tr>
        <tr>
            <td>В оценке:</td>
            <td>@if (result.IsFinal == true) {<img src="../images/iGreenCheck.png" width="25" height="25"/>}
                else {<img src="../images/iRedX.png" width="25" height="25" />}</td>
        </tr>
        <tr>
            <td>Записка:</td>
            <td><textarea class="form-control" type="text" id="exampleFormControlTextarea1" rows="5" cols="100" @bind="result.Note"></textarea></td>
        </tr>
    </table>
</DataEdit>

    @code {
        // Create a new, empty object
        Result result = new Result();

        IEnumerable<Sample> samples;
        IEnumerable<AnalyticalServ> analyticalservs;

        [Parameter]
        public int SampleId { get; set; }
        [Parameter]
        public int id { get; set; }

        // Set default page title and button text
        public string pagetitle = "Редактирование записи результата испытания";
        public string buttontext = "Изменить";

        //Executes on page open, set defaults on page.
        protected override async Task OnInitializedAsync()
        {
            samples = await SampleService.SampleList();
            analyticalservs = await AnalyticalServService.AnalyticalServList();
            result = await ResultService.Result_GetOne(id);

        }

        protected async Task ResultSave()
        {
            if (id != 0)
            {
                result.UpdateTime = DateTime.Now;
                result.UpdateUser = "Обновивший пользователь пользователь";
                // Update is id > 0
                await ResultService.ResultUpdate(result);
            }
            else
            {
                result.CreateTime = DateTime.Now;
                result.CreateUser = "Создавший пользователь";
                result.SampleId = SampleId;
                // Insert if id is zero.
                await ResultService.ResultInsert(result);
            }
            NavigationManager.NavigateTo("confirmation/sample/resultlist/" + SampleId);
        }
        void Cancel()
        {
            NavigationManager.NavigateTo("confirmation/sample/resultlist/" + SampleId);
        }
    }
