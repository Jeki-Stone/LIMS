@using LIMSBlazor.Data
@page "/confirmation/sample/finalresultaddedit/{SampleId:int}/{id:int}"
@inject IFinalResultService FinalResultService
@inject ISampleService SampleService
@inject IAnalyticalServService AnalyticalServService
@inject NavigationManager NavigationManager

<DataEdit PageTitle="@pagetitle" Model="@finalresult" BtnSaveText="@buttontext" OnValidSubmit="@FinalResultSave" OnClickCancel="@Cancel">
    <table>
        <tr>
            <td>Id испытания:</td>
            <td>@SampleId</td>
        </tr>
        <tr>
            <td>Аналитический сервис:</td>
            <td>@analyticalservs?.Where(x => x.Id == finalresult.AnalyticalServiceId).FirstOrDefault()?.Name</td>
        </tr>
        <tr>
            <td>Номер пробы:</td>
            <td>@finalresult.ValueNo</td>
        </tr>
        <tr>
            <td>Результат:</td>
            <td>@finalresult.Value</td>
        </tr>
        <tr>
            <td>Одобрено:</td>
            <td><input type="checkbox" @bind="finalresult.IsFinal"></td>
        </tr>
        <tr>
            <td>Записка:</td>
            <td><textarea class="form-control" type="text" id="exampleFormControlTextarea1" rows="5" cols="100" @bind="finalresult.Note"></textarea></td>
        </tr>
    </table>
</DataEdit>

@code {
    /// <summary>
    /// Создаём необходимые компоненты
    /// </summary>
    FinalResult finalresult = new FinalResult();

    IEnumerable<Sample> samples;
    IEnumerable<AnalyticalServ> analyticalservs;

    [Parameter]
    public int SampleId { get; set; }
    [Parameter]
    public int id { get; set; }

    /// <summary>
    /// Задаём базовые значения
    /// </summary>
    public string pagetitle = "Редактирование записи финального результата испытания";
    public string buttontext = "Изменить";

    /// <summary>
    /// Исполняемая при запуске страницы задача
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        samples = await SampleService.SampleList();
        analyticalservs = await AnalyticalServService.AnalyticalServList();
        finalresult = await FinalResultService.FinalResult_GetOne(id);
    }

    /// <summary>
    /// Задача обновляющая данные в БД
    /// </summary>
    protected async Task FinalResultSave()
    {
        finalresult.UpdateTime = DateTime.Now;
        finalresult.UpdateUser = "Обновивший пользователь пользователь";
        await FinalResultService.FinalResultUpdate(finalresult);

        NavigationManager.NavigateTo("confirmation/sample/finalresultlist/" + SampleId);
    }

    /// <summary>
    /// Отмена изменений и возвращение на прошлую страницу
    /// </summary>
    void Cancel()
    {
        NavigationManager.NavigateTo("confirmation/sample/finalresultlist/" + SampleId);
    }
}
