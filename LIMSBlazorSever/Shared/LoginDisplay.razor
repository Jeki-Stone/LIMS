@using LIMSBlazor.Data
@using Microsoft.AspNetCore.Components.Authorization
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject ILabService LabService
@inject IAspNetUserService AspNetUserService
@inject IAspNetUserRoleService AspNetUserRoleService
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject NavigationManager Navigation
@inject SignInManager<IdentityUser> _signInManager
@inherits LayoutComponentBase

<AuthorizeView>
    <Authorized>
        <div style="width:500px; position:absolute; left:20px">
            <select @onchange="GlobalLabChange" class="form-control" required>
                @if (labs != null)
                {
                    foreach (var lab in labs)
                    {
                        @if (lab != null)
                        {
                            <option value="@lab.Code">@lab.Name</option>
                        }
                    }
                }
            </select>
        </div>
        &nbsp
        <p style="margin-top:auto; margin-bottom:auto;">Hello, @context.User?.Identity?.Name!</p>
        <form method="post" action="Identity/Account/LogOut">
            <button type="submit" class="nav-link btn btn-link">Log out</button>
        </form>
    </Authorized>

</AuthorizeView>

@code {
    /// <summary>
    /// Создаём необходимые компоненты
    /// </summary>
    List<Lab> labs;

    int Labaratory;

    /// <summary>
    /// Исполняемая при запуске страницы задача
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userAuth = authState.User;

        if (userAuth.Identity.IsAuthenticated)
        {
            var userName = userAuth.Identity.Name;
            GlobalConstant.UserName = userName;
            labs = await AspNetUserRoleService.UserByNameLab(userName);
            if (labs.Count > 0 && labs[0] != null)
                GlobalConstant.GlobalLab = labs[0].Code;
        }
    }

    /// <summary>
    /// Выбор лабаротории
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    protected async Task GlobalLabChange(ChangeEventArgs e)
    {
        GlobalConstant.GlobalLab = Convert.ToString(e.Value);
        NavigationManager.NavigateTo("");
    }

    void Login()
    {
        NavigationManager.NavigateTo("/LoginForm");
    }

    //protected async Task LogOut()
    //{
    //    await _signInManager.SignOutAsync();
    //    NavigationManager.NavigateTo("Identity/Account/Login");
    //}
}