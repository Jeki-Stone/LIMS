<AuthorizeView Roles=@("Client, ADMIN")>
    <NotAuthorized>
        <p>Вы не обладаете необходимыми правами для доступа к этой странице.</p>
    </NotAuthorized>
    <Authorized>
        @using LIMSBlazor.Data
        @page "/client/sample/resultlist/{SampleId:int}"
        @inject IResultService ResultService
        @inject IAnalyticalServService AnalyticalServService
        @inject IAspNetUserService AspNetUserService
        @inject IFinalResultService FinalResultService
        @inject IUnitService UnitServiceService
        @inject IInstrumentService InstrumentService
        @inject NavigationManager NavigationManager

        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link" href="/client/sample/finalresultlist/@SampleId">Финальные результаты</a>
            </li>
            <li class="nav-item">
                <a class="nav-link active" href="/client/sample/resultlist/@SampleId">Результаты</a>
            </li>
        </ul>
        <DataView PageTitle="Список результатов" UrlBack="/client/samplelist" UrlBackText="Вернуться к журналу результатов">
            <Filtr>
                <li class="nav-item">
                    <select @bind="changsort" id="sort" required class="form-control">
                        @if (analyticalservs != null)
                        {
                            <option value="0">Выберите значение</option>
                            foreach (var item in results.GroupBy(e => e.AnalyticalServiceId))
                            {
                                <option value="@item.Key">@analyticalservs?.Where(x => x.Id == item.Key).FirstOrDefault()?.Name</option>
                            }
                        }
                    </select>
                </li>
            </Filtr>
            <Header>
                <tr>
                    <th>Id</th>
                    <td>Id испытания</td>
                    <td>Аналитический сервис</td>
                    <td>Испытательная машина</td>
                    <td>Номер пробы</td>
                    <td>Результат</td>
                    <td>Ед.изм.</td>
                    <td>В оценке</td>
                    <td>Записка</td>
                    <td>Время создания</td>
                    <td>Время последних изменений</td>
                    <td>Кем созданно</td>
                    <td>Кем изменено</td>
                </tr>
            </Header>
            <Rows>
                @if (results == null)
                {
                    <p style="text-align:center">
                        <img src="../images/loader.gif" />
                    </p>
                }
                else
                {
                    @foreach (var result in results.Where(x => changsort == 0 || x.AnalyticalServiceId == changsort))
                    {
                        <tr>
                            <td>@result.Id</td>
                            <td>@result.SampleId</td>
                            <td>@analyticalservs?.Where(x => x.Id == result.AnalyticalServiceId).FirstOrDefault()?.Name</td>
                            <td>@instruments?.Where(x => x.Id == result.InstrumentId).FirstOrDefault()?.Name</td>
                            <td>@result.ValueNo</td>
                            <td>@result.Value</td>
                            <td>@units?.Where(x => x.Id == result.UnitId).FirstOrDefault()?.Name</td>
                            <td style="text-align:center">
                                @if (result.IsFinal == true)
                                {<img src="../images/iGreenCheck.png" width="25" height="25" />}
                                else
                                {<img src="../images/iRedX.png" width="25" height="25" />}
                            </td>
                            <td>@result.Note</td>
                            <td>@result.CreateTime</td>
                            <td>@result.UpdateTime</td>
                            <td>@result.CreateUser</td>
                            <td>@result.UpdateUser</td>
                        </tr>
                    }
                }
            </Rows>
            <ChartDiogramm>
                @if (results != null)
                {
                    <div class="container-fluid">
                        <div class="row">
                            @foreach (var itemValNo in results.GroupBy(e => e.ValueNo))
                            {
                                @foreach (var item in itemValNo.Where(x => changsort == 0 || x.AnalyticalServiceId == changsort).GroupBy(e => e.AnalyticalServiceId))
                                {
                                    var title = analyticalservs?.Where(x => x.Id == item.Key).FirstOrDefault()?.Name;
                                    <div style="min-width: 500px;">
                                        <ChartEdit AnalyticalTrue="1" Title=@title SampleId=@SampleId GrupItem=@item.Where(x => x.IsFinal == true).ToList() />
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }
            </ChartDiogramm>
        </DataView>


        @code {
            /// <summary>
            /// Создаём необходимые компоненты
            /// </summary>
            IEnumerable<Result> results;
            IEnumerable<AnalyticalServ> analyticalservs;
            IEnumerable<Unit> units;
            IEnumerable<Instrument> instruments;

            [Parameter]
            public int SampleId { get; set; }
            [Parameter]
            public string UrlSampleId { get; set; }

            FinalResult finalresult = new FinalResult();
            List<Result> GrupItem;

            /// <summary>
            /// Задаём базовые значения
            /// </summary>
            public int changsort = 0;

            /// <summary>
            /// Исполняемая при запуске страницы задача
            /// </summary>
            protected override async Task OnInitializedAsync()
            {
                results = await ResultService.ResultList(SampleId);
                analyticalservs = await AnalyticalServService.AnalyticalServList();
                units = await UnitServiceService.UnitList();
                instruments = await InstrumentService.InstrumentList();
                UrlSampleId = "/confirmation/sample/resultaddedit/" + SampleId;
            }
        }
</Authorized>
</AuthorizeView>