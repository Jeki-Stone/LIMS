@using LIMSBlazor.Data
@page "/analysis/sample/finalresultdelete/{SampleId:int}/{id:int}"
@inject IFinalResultService FinalResultService
@inject IAnalyticalServService AnalyticalServService
@inject IUnitService UnitServiceService
@inject IInstrumentService InstrumentService
@inject NavigationManager NavigationManager

<DataEdit FormType="Delete" PageTitle="Удалить финальный результат испытания" DeleteWarning="Вы уверены что хотите удалить этот финальный результат испытания? Данные нельзя будет вернуть!" Model="@finalresult" OnClickDelete="@Delete" OnClickCancel="@Cancel">
    <table>
        <tr>
            <td>Id испытания:</td>
            <td>@finalresult.SampleId</td>
        </tr>
        <tr>
            <td>Аналитический сервис:</td>
            <td>@analyticalservs?.Where(x => x.Id == finalresult.AnalyticalServiceId).FirstOrDefault()?.Name</td>
        </tr>
        <tr>
            <td>Наименование испытательного оборудования:</td>
            <td>@instruments?.Where(x => x.Id == finalresult.InstrumentId).FirstOrDefault()?.Name</td>
        </tr>
        <tr>
            <td>Номер пробы:</td>
            <td>@finalresult.ValueNo</td>
        </tr>
        <tr>
            <td>Результат:</td>
            <td>@finalresult.Value @units?.Where(x => x.Id == finalresult.UnitId).FirstOrDefault()?.Name</td>
        </tr>
        <tr>
            <td>В оценке:</td>
            <td>
                @if (finalresult.IsFinal == true)
                {<img src="../images/iGreenCheck.png" width="25" height="25" />}
                else
                {<img src="../images/iRedX.png" width="25" height="25" />}
            </td>
        </tr>
        <tr>
            <td>Записка:</td>
            <td>@finalresult.Note</td>
        </tr>
    </table>
</DataEdit>


@code {
    /// <summary>
    /// Создаём необходимые компоненты
    /// </summary>
    FinalResult finalresult = new FinalResult();

    IEnumerable<AnalyticalServ> analyticalservs;
    IEnumerable<Unit> units;
    IEnumerable<Instrument> instruments;

    [Parameter]
    public int SampleId { get; set; }
    [Parameter]
    public int id { get; set; }

    /// <summary>
    /// Исполняемая при запуске страницы задача
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        analyticalservs = await AnalyticalServService.AnalyticalServList();
        finalresult = await FinalResultService.FinalResult_GetOne(id);
        units = await UnitServiceService.UnitList();
        instruments = await InstrumentService.InstrumentList();
    }


    /// <summary>
    /// Задача удаляющая запись из БД
    /// </summary>
    protected async Task Delete()
    {
        await FinalResultService.FinalResultDelete(id);
        NavigationManager.NavigateTo("/analysis/sample/finalresultlist/" + SampleId);
    }

    /// <summary>
    /// Отмена изменений и возвращение на прошлую страницу
    /// </summary>
    void Cancel()
    {
        NavigationManager.NavigateTo("/analysis/sample/finalresultlist/" + SampleId);
    }
}
