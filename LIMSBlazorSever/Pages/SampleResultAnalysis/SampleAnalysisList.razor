<AuthorizeView Roles=@(GlobalConstant.GlobalLab + "--Аналитик, ADMIN")>
    <NotAuthorized>
        <p>Вы не обладаете необходимыми правами для доступа к этой странице.</p>
    </NotAuthorized>
    <Authorized>
        @using LIMSBlazor.Data
        @using Microsoft.AspNetCore.Identity;
        @page "/analysis/samplelist"
        @inject ISampleService SampleService
        @inject IAspNetUserService AspNetUserService
        @inject ISampleTypeService SampleTypeService
        @inject ILocService LocService
        @inject ILabService LabService

        <DataView PageTitle="Список испытаний на анализе">
            <Header>
                <tr>
                    <th style="text-align:center">#</th>
                    <th>Id</th>
                    <td>Время получения</td>
                    <td>Время начала тестов</td>
                    <td>Клиент</td>
                    <td>Лаборатория</td>
                    <td>Тип пробы</td>
                    <td>Количество проб</td>
                    <td>Статус</td>
                    <td>Готовность</td>
                    <td>Записка</td>
                    <td>Место взятия пробы</td>
                    <td>Причины изменений</td>
                    <td>Время создания</td>
                    <td>Время последних изменений</td>
                    <td>Кем созданно</td>
                    <td>Кем изменено</td>
                    <td>Дата готовности</td>
                    <td>Пользователь подтверждающий готовность</td>
                </tr>
            </Header>
            <Rows>
                @if (samples == null)
                {
                    <p style="text-align:center">
                        <img src="../images/loader.gif" />
                    </p>
                }
                else
                {
                    @foreach (var sample in samples)
                    {
                        if (sample.Status == 3 && labs?.Where(x => x.Id == sample.LabId).FirstOrDefault()?.Code == GlobalConstant.GlobalLab)
                        {
                            <tr>
                                <td style="text-align:center">
                                    <a href="analysis/sampleaddedit/@sample.Id">
                                        <img src="../images/iEdit.png" width="20" height="20" />
                                    </a>
                                    &nbsp
                                    <a href="analysis/sample/resultlist/@sample.Id">
                                        <img src="../images/downArrow.png" title="Add result" width="20" height="20" />
                                    </a>
                                </td>
                                <td>@sample.Id</td>
                                <td>@sample.RecieveTime</td>
                                <td>@sample.TestTime</td>
                                <td>@aspNetUsers?.Where(x => x.Id == sample.UserId).FirstOrDefault()?.UserName</td>
                                <td>@labs?.Where(x => x.Id == sample.LabId).FirstOrDefault()?.Name</td>
                                <td>@sampletypes?.Where(x => x.Id == sample.SampleTypeId).FirstOrDefault()?.Name</td>
                                <td>@sample.NumSamples</td>
                                <td>@GlobalConstant.SampleStatusModel.Where(x => x.Value == Convert.ToString(sample.Status)).FirstOrDefault()?.Text</td>
                                <td style="text-align:center">
                                    @if (sample.IsFinal == true)
                                    {<img src="../images/iGreenCheck.png" width="25" height="25" />}
                                    else
                                    {<img src="../images/iRedX.png" width="25" height="25" />}
                                </td>
                                <td>@sample.Note</td>
                                <td>@locs?.Where(x => x.Id == sample.LocationId).FirstOrDefault()?.Name</td>
                                <td>@sample.LastEditComment</td>
                                <td>@sample.CreateTime</td>
                                <td>@sample.UpdateTime</td>
                                <td>@sample.CreateUser</td>
                                <td>@sample.UpdateUser</td>
                                <td>@sample.FinalizeTime</td>
                                <td>@sample.FinalizeUser</td>
                            </tr>
                        }
                    }
                }
            </Rows>
        </DataView>

        @code {
            /// <summary>
            /// Создаём необходимые компоненты
            /// </summary>
            IEnumerable<Sample> samples;
            List<IdentityUser> aspNetUsers;
            IEnumerable<SampleType> sampletypes;
            IEnumerable<Loc> locs;
            IEnumerable<Lab> labs;

            /// <summary>
            /// Исполняемая при запуске страницы задача
            /// </summary>
            protected override async Task OnInitializedAsync()
            {
                samples = await SampleService.SampleList();
                aspNetUsers = await AspNetUserService.AspNetUserList();
                sampletypes = await SampleTypeService.SampleTypeList();
                locs = await LocService.LocList();
                labs = await LabService.LabList();
            }
        }
</Authorized>
</AuthorizeView>